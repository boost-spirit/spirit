[/==============================================================================
    Copyright (C) 2001-2009 Joel de Guzman
    Copyright (C) 2001-2009 Hartmut Kaiser

    Distributed under the Boost Software License, Version 1.0. (See accompanying
    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
===============================================================================/]

[section Nonterminal]

[heading Module Headers]

    // forwards to <boost/spirit/qi/nonterminal.hpp>
    #include <boost/spirit/include/qi_nonterminal.hpp>

Also, see __include_structure__.

[/------------------------------------------------------------------------------]
[section Rule]

[heading Description]

The rule is a polymorphic parser that acts as a named placeholder
capturing the behavior of a __peg__ expression assigned to it. Naming a
__peg__ expression allows it to be referenced later and makes it
possible for the rule to call itself. This is one of the most important
mechanisms and the reason behind the word "recursive" in recursive
descent parsing.

[heading Header]

    // forwards to <boost/spirit/qi/nonterminal/rule.hpp>
    #include <boost/spirit/include/qi_rule.hpp>

Also, see __include_structure__.

[heading Namespace]

[table
    [[Name]]
    [[`boost::spirit::qi::rule`]]
    [[`boost::spirit::qi::locals`]]
    [[`boost::spirit::qi::debug`]]

    [[`boost::spirit::_val  // alias: boost::spirit::qi::_val`]]
    [[`boost::spirit::_lp   // alias: boost::spirit::qi::_lp`]]
    [[`boost::spirit::_rN   // alias: boost::spirit::qi::_rN`]]
]

In the table above [*_lp] represents a local variable placeholder and
can be one of `_a`, `_b`, `_c`, `_d`, `_e`, `_f`, `_g`, `_h`, `_i` or
`_j` and [*_rN] represents an inherited attribute placeholder and can be
one of `_r1`, `_r2`, `_r3`, `_r4`, `_r5`, `_r6`, `_r7`, `_r8`, `_r9`
or`_r10`.

[heading Synopsis]

    template <typename Iterator, typename A1, typename A2, typename A3>
    struct rule;

[heading Template parameters]

[table
    [[Parameter]            [Description]                   [Default]]
    [[`Iterator`]           [The underlying iterator 
                            type that the rule is  
                            expected to work on.]           []]
    [[`A1`, `A2`, `A3`]     [Either `Signature`, 
                            `Skipper` or `Locals` in 
                            any order. See table below.]    [See table below.]]
]

[table
    [[Parameter]            [Description]                   [Default]]
    [[`Signature`]          [Specifies the rule's synthesized 
                            (return value) and inherited 
                            attributes (arguments). More on
                            this below.]                    [__unused_type__. 
                                                            When `Signature` defaults 
                                                            to __unused_type__, the effect 
                                                            is the same as specifying a signature
                                                            of `void()` which is also equivalent 
                                                            to `unused_type()`]]
    [[`Skipper`]            [Specifies the rule's skipper 
                            parser. Specify this if you
                            want the rule to skip white 
                            spaces.]                        [__unused_type__]]
    [[`Locals`]             [Specifies the rule's local
                            variables. See below.]          [__unused_type__]]
]

[heading Model of]

[:__parser_concept__]

[heading Signature]

Rules can have both synthesized and inherited attributes. The rule's
/Signature/ specifies both the synthesized and inherited attributes. The
specification uses the function declarator syntax: 

    RT(A0, A1, A2, ..., AN)
    
where `RT` is the rule's synthesized attribute and `A0` ... `AN` are the
rule's inherited attributes.

[heading Attributes]

[:The rule's parser attribute is `RT`: The synthesized attribute of the
rule.]

The rule models a C++ function. The rule's synthesized attribute is
analogous to the function return value and its inherited attributes are
analogous to function arguments. The inherited attributes (arguments)
can be passed in just like any __qi_lazy_argument__, e.g.:

    r(expr) // Evaluate expr at parse time and pass the result to the parser r
    
[heading `_val`]

The `_val` placeholder can be used in __phoenix__ semantic actions
anywhere in the rule's definition (RHS). This __phoenix__ placeholder
refers to the rule's (synthesized) attribute. The `_val` placeholder
acts like a mutable reference to the rule's attribute.

[heading `_r1`...`r10`]

The `_r1`...`r10` placeholders can be used in __phoenix__ semantic
actions anywhere in the rule's definition (RHS). These __phoenix__
placeholders refer to the rule's inherited attributes.

[heading Locals]

Rules can have local variables that will be created on the stack at
parse time. A locals descriptor added to the rule declaration will give
the rule local variables: 

    template <typename T0, typename T1, typename T2, ... typename TN>
    struct locals;

where `T0` ... `TN` are the types of local variables accessible in your
__phoenix__ semantic actions using the placeholders `_a`, `_b`, `_c`,
`_d`, `_e`, `_f`, `_g`, `_h`, `_i` and `_j` which correspond to the
rule's local variables `T0` ... `T9`.

See example below.

[variablelist Notation
    [[`r, r2`]                      [Rules]]
    [[`p`]                          [A parser expression]]
    [[`arg1`, `arg2`, ... `argN`]   [__qi_lazy_arguments__ that evaluate to each of 
                                    the rule's inherited attributes (see below).]]
    [[`Iterator`]                   [The underlying iterator type that the rule is  
                                    expected to work on.]]
    [[`A1`, `A2`, `A3`]             [Either `Signature`, `Skipper` or `Locals` in 
                                    any order.]]
]

[heading Expression Semantics]

Semantics of an expression is defined only where it differs from, or is
not defined in __parser_concept__.

[table
    [[Expression]                               [Description]]
    [[
``rule<Iterator, A1, A2, A3> 
    r(name);``]                                 [Rule declaration. `Iterator` is required.
                                                `A1, A2, A3` are optional and can be specified in any order.
                                                `name` is an optional string that gives the rule
                                                its name, useful for debugging and error handling.]]
    [[
``rule<Iterator, A1, A2, A3> 
    r(r2);``]                                   [Copy construct rule `r` from rule `r2`.]]
    [[`r`]                                      [In a parser expression, invoke rule `r`]]
    [[`r(arg1, arg2, ... argN)`]                [In a parser expression, invoke rule `r` 
                                                passing in inherited attributes
                                                `arg1`...`argN`]]
    [[`r = r2;`]                                [Assign rule `r2` to `r`.]]
    [[`r.alias()`]                              [return an alias of `r`. The alias is a parser that
                                                holds a reference to `r`.]]
    [[`r.copy()`]                               [Get a copy of `r`.]]
    [[`r.name(name)`]                           [Naming a rule.]]
    [[`r.name()`]                               [Getting the name of a rule.]]
    [[debug(r)]                                 [Debug rule `r`.]]
    [[`r = p;`]                                 [Rule definition. This is equivalent to `r %= p`
                                                (see below) if there are no semantic actions attached 
                                                anywhere in `p`.]]
    [[`r %= p;`]                                [Auto-rule definition. The attribute of `p` should be
                                                compatible with the synthesized attribute of `r`. When `p`
                                                is successful, its attribute is automatically propagated
                                                to `r`'s synthesized attribute.]]
]

[heading Complexity]

[:The complexity is defined by the complexity of the RHS parser, `p`]

[heading Example]

[reference_rule]

[note The test harness for the example(s) above is presented in the
__qi_basics_examples__ section.]

[endsect] [/ Rule]

[/------------------------------------------------------------------------------]
[section Grammar]

[heading Description]

Description of XXX

[heading Header]

    #include <boost/spirit/xxx.hpp>

    ...

Also, see __include_structure__.

[heading Namespace]

[table
    [[Name]]
    [[`boost::spirit::xx`]]
]

[heading Synopsis]

    template <typename T>
    struct XXX;

[heading Template parameters]

[table
    [[Parameter]            [Description]               [Default]]
    [[`T`]                  [What is T]                 []]
]

[heading Model of]

[variablelist Notation
    [[`xxx`]     [An XXX]]
]

[heading Expression Semantics]

Semantics of an expression is defined only where it differs from, or is not
defined in _concept-of_XXX_.

[table
    [[Expression]       [Semantics]]
    [[`xxx`]            [Semantics of `xxx`]]
]

[heading Attributes]

See __qi_comp_attr_notation__.

[table
    [[Expression]       [Attribute]]
    [[`xxx`]            [Attribute of `xxx`]]
]

[heading Complexity]

Big-O complexity of the parser

[heading Example]

Real example code. Use Quickbook import mechanism to link to actual
working code snippets here.

[endsect] [/ Grammar]

[endsect] [/ Nonterminal]
