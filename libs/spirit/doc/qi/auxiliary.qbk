[/==============================================================================
    Copyright (C) 2001-2009 Joel de Guzman
    Copyright (C) 2001-2009 Hartmut Kaiser

    Distributed under the Boost Software License, Version 1.0. (See accompanying
    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
===============================================================================/]

[section Auxiliary]

This module includes different auxiliary parsers not fitting into any of the 
other categories. This module includes the `attr`, `eoi`, `eol`, `eps`, and 
`lazy` parsers.

[heading Module Header]

    // forwards to <boost/spirit/home/qi/auxiliary.hpp>
    #include <boost/spirit/include/qi_auxiliary.hpp>
    
Also, see __include_structure__.

[/------------------------------------------------------------------------------]
[section attr]

[heading Description]

The `attr` parser does not consume any input, for this reason it always
matches an empty string. The parser created by `attr` always succeeds.
It's purpose is to expose its specified parameter as an attribute. 

[heading Header]

    // forwards to <boost/spirit/home/qi/auxiliary/attr.hpp>
    #include <boost/spirit/include/qi_attr.hpp>

Also, see __include_structure__.

[heading Namespace]

[table
    [[Name]]
    [[`boost::spirit::attr // alias: boost::spirit::qi::attr`]]
]

[heading Model of]

[:__parser_concept__]

[variablelist Notation
    [[`attrib`]     [A arbitrary typed constant value, e.g. 0.0, "Hello", or a 
                    variable of arbitrary type or a __lazy_argument__ that evaluates 
                    to an arbitrary type.]]
    [[`Attrib`]     [The type of `attrib` or if it is a __lazy_argument__, its
                    return type.]]
]

[heading Expression Semantics]

Semantics of an `attr()` expression are fully defined by the __parser_concept__
concept.

[table
    [[Expression]       [Semantics]]
    [[`attr(attrib)`]   [Create a pseudo parser exposing the current value of
                        `attrib` as its attribute without consuming any input 
                        at parse time.]]
]

[heading Attributes]

[table
    [[Expression]       [Attribute]]
    [[`attr(attrib)`]   [`Attrib`]]
]


[heading Complexity]

[:O(1)]

The complexity is constant as no input is consumed and no matching is done.

[heading Example]

Some using declarations:

[reference_using_declarations_attr]

Using `attr` with literals:

[reference_attr]

Using `attr` with __phoenix__ function objects:

[reference_attr_phoenix]

[endsect] [/ auxiliary/attr]

[endsect] [/ Auxiliary]
