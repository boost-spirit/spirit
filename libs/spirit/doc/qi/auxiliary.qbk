[/==============================================================================
    Copyright (C) 2001-2009 Joel de Guzman
    Copyright (C) 2001-2009 Hartmut Kaiser

    Distributed under the Boost Software License, Version 1.0. (See accompanying
    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
===============================================================================/]

[section Auxiliary]

This module includes different auxiliary parsers not fitting into any of the 
other categories. This module includes the `attr`, `eoi`, `eol`, `eps`, and 
`lazy` parsers.

[heading Module Header]

    // forwards to <boost/spirit/home/qi/auxiliary.hpp>
    #include <boost/spirit/include/qi_auxiliary.hpp>

[/------------------------------------------------------------------------------]
[section attr]

[table
    [[Name]                     [Description]]
    [[`boost::spirit::attr`]    [A pseudo parser that injects an attribute
                                but does not consume any input.]]
]

[heading Description]

The `attr` parser does not consume any input, for this reason it always matches 
an empty string. The parser generated by `attr` always succeeds. It's 
purpose is to expose its specified parameter as an attribute to the parsing 
process.

[heading Header]

    // forwards to <boost/spirit/home/qi/auxiliary/attr.hpp>
    #include <boost/spirit/include/qi_attr.hpp>

Also, see __include_structure__.

[heading Model of]

[:__parser_concept__]

[variablelist Notation
    [[`attrib`] [A arbitrary typed constant value, e.g. 0.0, "Hello", or a 
                 variable of arbitrary type.]]
    [[`fattrib`][A __lazy_argument__ that evaluates to an arbitrary type.]]
]

[heading Expression Semantics]

Semantics of an `attr()` expression are fully defined by the __parser_concept__
concept.

[table
    [[Expression]       [Semantics]]
    [[`attr(attrib)`]   [Generate a pseudo parser exposing the current value of
                         `attrib` as its attribute value while not consuming 
                         any input at parse time.]]
    [[`attr(fattrib)`]  [Generate a pseudo parser exposing as its attribute the 
                         value returned by invoking `fattrib` at parse time,
                         while not consuming any input. See __lazy_argument__]]
]

[heading Attributes]

[table
    [[Expression]       [Attribute]]
    [[`attr(attrib)`]   [`Attrib`, which is the type of `attrib`]]
    [[`attr(fattrib)`]  [`Attrib`, which is the return type of `fattrib`]]
]


[heading Complexity]

[:O(1)]

The complexity is constant as no input is consumed and no matching is done.

[heading Example]

Some using declarations:

[reference_using_declarations_attr]

Using `attr` with literals:

[reference_attr]

Using `attr` with __phoenix__ function objects:

[reference_attr_phoenix]

[endsect] [/ auxiliary/attr]

[endsect] [/ Auxiliary]
