[/==============================================================================
    Copyright (C) 2001-2009 Joel de Guzman
    Copyright (C) 2001-2009 Hartmut Kaiser

    Distributed under the Boost Software License, Version 1.0. (See accompanying
    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
===============================================================================/]

This quick reference section is provided for convenience. You can use
this section as a sort of a "cheat-sheet" on the most commonly used Karma
components. It is not intended to be complete, but should give you an
easy way to recall a particular component without having to dig up on
pages and pages of reference doumentation.

[/////////////////////////////////////////////////////////////////////////////]
[section Common Notation]

[variablelist Notation
    [[`G`]              [Generator type]]
    [[`g, a, b, c`]     [Generator objects]]
    [[`A, B, C`]        [Attribute types of generators A, B and C]]
    [[`I`]              [The iterator type used for generation]]
    [[`Unused`]         [An `unused_type`]]
    [[`Context`]        [The enclosing rule's `Context` type]]
    [[`attrib`]         [A attribute value]]
    [[`Attrib`]         [An attribute type]]
    [[`b`]              [A boolean expression]]
    [[`fg`]             [A (lazy generator) function with signature `G(Unused, Context)`]]
    [[`fa`]             [A (semantic action) function with signature `void(Attr&, Context, bool&)`.
                        The third parameter is a boolean flag that can be set to false to
                        force the generator to fail. Both `Context` and the boolean flag are
                        optional.]]
    [[`outiter`]        [An output iterator to receive the generated output]]
    [[`Ch`]             [Character-class specific character type (See __char_class_types__)]]
    [[`ch`]             [Character-class specific character (See __char_class_types__)]]
    [[`ch2`]            [Character-class specific character (See __char_class_types__)]]
    [[`chset`]          [Character-set specifier string (example: "a-z0-9")]]
    [[`str`]            [Character-class specific string (See __char_class_types__)]]
    [[`Str`]            [Attribute of `str`: `std::basic_string<T>` where `T` is the underlying character type of `str`]]
    [[`tuple<>`]        [Used as a placeholder for a fusion sequence]]
    [[`vector<>`]       [Used as a placeholder for an STL container]]
    [[`variant<>`]      [Used as a placeholder for a boost::variant]]
    [[`optional<>`]     [Used as a placeholder for a boost::optional]]
]

[endsect]

[/////////////////////////////////////////////////////////////////////////////]
[section Predefined Primitive Generators]

[table 
    [[Expression]           [Attribute]                 [Description]]
    [[__karma_eol__]        [`Unused`]                  [Generates the end of line (`\n`)]]
    [[__karma_eps__]        [`Unused`]                  [Generate an empty string]]
    [[__karma_feps__]       [`Unused`]                  [If `b` is true, generate an empty string]]
    [[__karma_lazy__]       [Attribute of `G` where `G`
                             is the return type of `fg`] [Invoke `fg` at generation time, returning a generator
                                                        `g` which is then called to generate.]]
    [[__karma_llazy__]      [see __karma_lazy__ above]  [Equivalent to `lazy(fg)`]]
    [[`g[fa]`]              [Attribute of `g`]          [Call semantic action `fa` (before executing `g`).]]

    [[`byte_`]              [8 bits native endian]      [Generates an 8 bit binary]]
    [[`word`]               [16 bits native endian]     [Generates a 16 bit binary in native endian representation]]
    [[`big_word`]           [16 bits big endian]        [Generates a 16 bit binary in big endian representation]]
    [[`little_word`]        [16 bits little endian]     [Generates a 16 bit binary in little endian representation]]
    [[`dword`]              [32 bits native endian]     [Generates a 32 bit binary in native endian representation]]
    [[`big_dword`]          [32 bits big endian]        [Generates a 32 bit binary in big endian representation]]
    [[`little_dword`]       [32 bits little endian]     [Generates a 32 bit binary in little endian representation]]
    [[`qword`]              [64 bits native endian]     [Generates a 64 bit binary in native endian representation]]
    [[`big_qword`]          [64 bits big endian]        [Generates a 64 bit binary in big endian representation]]
    [[`little_qword`]       [64 bits little endian]     [Generates a 64 bit binary in little endian representation]]

    [[`char_(ch)`]          [`Ch`]                      [Generates `ch`]]
    [[`char_("c")`]         [`Ch`]                      [Generates a single char string literal, `c`]]

    [[`ch`]                 [`Unused`]                  [Generates `ch`]]
    [[`str`]                [`Unused`]                  [Generates `str`]]
    [[`lit(ch)`]            [`Unused`]                  [Generates `ch`]]
    [[`lit(str)`]           [`Unused`]                  [Generates `str`]]
    [[`string(str)`]        [`Str`]                     [Generates `str`]]

    [[`lower[a]`]           [`A`]                       [Generate `a` as lower case]]
    [[`upper[a]`]           [`A`]                       [Generate `a` as upper case]]

    [[`left_align[a]`]      [`A`]                       [Generate `a` left aligned in column of width 
                                                         BOOST_KARMA_DEFAULT_FIELD_LENGTH]]
    [[`left_align(N)[a]`]   [`A`]                       [Generate `a` left aligned in column of width `N`]]
    [[`left_align(N, g)[a]`][`A`]                       [Generate `a` left aligned in column of width `N`
                                                         while using `g` to generate the necesssary
                                                         padding]]
    [[`right_align[a]`]     [`A`]                       [Generate `a` right aligned in column of width 
                                                         BOOST_KARMA_DEFAULT_FIELD_LENGTH]]
    [[`right_align(N)[a]`]  [`A`]                       [Generate `a` right aligned in column of width `N`]]
    [[`right_align(N, g)[a]`][`A`]                      [Generate `a` right aligned in column of width `N`
                                                         while using `g` to generate the necesssary
                                                         padding]]
    [[`center[a]`]          [`A`]                       [Generate `a` centered in column of width 
                                                         BOOST_KARMA_DEFAULT_FIELD_LENGTH]]
    [[`center(N)[a]`]       [`A`]                       [Generate `a` centered in column of width `N`]]
    [[`center(N, g)[a]`]    [`A`]                       [Generate `a` centered in column of width `N`
                                                         while using `g` to generate the necesssary
                                                         padding]]

    [[`maxwidth[a]`]        [`A`]                       [Generate `a` truncated to column of width 
                                                         BOOST_KARMA_DEFAULT_FIELD_MAXWIDTH]]
    [[`maxwidth(N)[a]`]     [`A`]                       [Generate `a` truncated to column of width `N`]]

    [[`repeat[a]`]          [`vector<A>`]               [Repeat `a` zero or more times]]
    [[`repeat(N)[a]`]       [`vector<A>`]               [Repeat `a` `N` times]]
    [[`repeat(N, M)[a]`]    [`vector<A>`]               [Repeat `a` `N` to `M` times]]
    [[`repeat(N, inf)[a]`]  [`vector<A>`]               [Repeat `a` `N` or more times]]

    [[`verbatim[a]`]        [`A`]                       [Disable delimited generation for `a`]]
    [[`delimit[a]`]         [`A`]                       [Reestablish the delimiter that got inhibited by verbatim]]
    [[`delimit(g)[a]`]      [`A`]                       [Use `g` as a skipper for generating `a`]]

    [[`omit[a]`]            [`A`]                       [Consumes the attribute type of `a` without generating anything]]

    [[`float_`]             [`float`]                   [Generate a floating point number from a `float`]]
    [[`double_`]            [`double`]                  [Generate a floating point number from a `double`]]
    [[`long_double`]        [`long double`]             [Generate a floating point number from a `long double`]]

    [[`bin`]                [`unsigned`]                [Generate a binary integer from an `unsigned`]]
    [[`oct`]                [`unsigned`]                [Generate an octal integer from an `unsigned`]]
    [[`hex`]                [`unsigned`]                [Generate a hexadecimal integer from an `unsigned`]]
    [[`ushort_`]            [`unsigned short`]          [Generate an unsigned short integer]]
    [[`ulong_`]             [`unsigned long`]           [Generate an unsigned long integer]]
    [[`uint_`]              [`unsigned int`]            [Generate an unsigned int]]
    [[`ulong_long`]         [`unsigned long long`]      [Generate an unsigned long long]]
    [[`short_`]             [`short`]                   [Generate a short integer]]
    [[`long_`]              [`long`]                    [Generate a long integer]]
    [[`int_`]               [`int`]                     [Generate an int]]
    [[`long_long`]          [`long long`]               [Generate a long long]]

    [[`!a`]                 [`Unused`]                  [Not predicate. Ensure that `a` does not succeed 
                                                        generating but don't create any output]]
    [[`&a`]                 [`Unused`]                  [And predicate. Ensure that `a` does succeed
                                                        generating but don't create any output]]
    [[`-a`]                 [`optional<A>`]             [Optional. Generate `a` zero or one time]]
    [[`*a`]                 [`vector<A>`]               [Kleene. Generate `a` zero or more times]]
    [[`+a`]                 [`vector<A>`]               [Plus. Generate `a` one or more times]]
    [[`a | b`]              [`variant<A, B>`]           [Alternative. Generate `a` or `b`]]
    [[`a << b`]             [`tuple<A, B>`]             [Sequence. Generate `a` followed by `b`]]
    [[`a % b`]              [`vector<A>`]               [List. Generate `a` delimited `b` one or more times]]
]

[endsect]

[/////////////////////////////////////////////////////////////////////////////]
[section Compound Attribute Rules]

The notation will be for instance: 

    a: A, b: B --> (a << b): tuple<A, B>

which reads as: given, `a` and `b` are generators, and `A` is the type 
of the attribute of `a`, and `B` is the type of the attribute of `b`, then the 
type of the attribute of `a << b` will be `tuple<A, B>`.

[table Spirit.Karma compound generator attribute types
    [[Expression]           [Attribute]]

    [[sequence (`<<`)]
[``a: A, b: B --> (a << b): tuple<A, B>
a: A, b: Unused --> (a << b): A
a: Unused, b: B --> (a << b): B
a: Unused, b: Unused --> (a << b): Unused
a: A, b: A --> (a << b): vector<A>``]]

    [[alternative (`|`)]
[``a: A, b: B --> (a | b): variant<A, B>
a: A, b: Unused --> (a | b): variant<Unused, A>
a: Unused, b: B --> (a | b): variant<Unused, B>
a: Unused, b: Unused --> (a | b): Unused
a: A, b: A --> (a | b): A``]]

    [[kleene (`*`)]
[``a: A --> *a: vector<A>
a: Unused --> a: Unused``]]

    [[plus (`+`)]
[``a: A --> +a: vector<A>
a: Unused --> a: Unused``]]

    [[list (`%`)]
[``a: A, b: B --> (a % b): vector<A>
a: Unused, b: B --> (a % b): Unused``]]

    [[repetition]
[``a: A --> repeat(...,...)[a]: vector<A>
a: Unused --> repeat(...,...)[a]: Unused``]]

    [[optional (`-`)]
[``a: A --> -a: optional<A>
a: Unused --> -a: Unused``]]

    [[and predicate (`&`)]  [`a: A --> &a: Unused`]]
    [[not predicate (`!`)]  [`a: A --> !a: Unused`]]
]

[endsect]

[/////////////////////////////////////////////////////////////////////////////]
[section Non-terminals]

[variablelist Notation
    [[`RT`]                     [Synthesized attribute. The rule or grammar's return type.]]
    [[`Arg1`, `Arg2`, `ArgN`]   [Inherited attributes. Zero or more or arguments.]]
    [[`L1`, `L2`, `LN`]         [Zero or more local variables.]]
    [[`r, r2`]                  [Rules]]
    [[`g`]                      [A grammar]]
    [[`p`]                      [A generator expression]]
    [[`my_grammar`]             [A user defined grammar]]
]

[variablelist Terminology
    [[Signature]                [`RT(Arg1, Arg2 ... ,ArgN)`. The signature specifies
                                the synthesized (return value) and inherited (arguments)
                                attributes.]]
    [[Locals]                   [`locals<L1, L2 ..., LN>`. The local variables.]]
    [[Delimiter]                [The delimit-generator type]]
]

[variablelist Template Arguments
    [[`Iterator`]               [The iterator type you will use for parsing.]]
    [[`A1`, `A2`, `A3`]         [Can be one of 1)Signature 2)Locals 3)Skipper.]]
]

[table
    [[Expression]                               [Description]]
    [[`rule<Iterator, A1, A2, A3> r(name);`]    [Rule declaration. `Iterator` is required.
                                                `A1, A2, A3` are optional and can be specified in any order.
                                                `name` is an optional string that gives the rule
                                                its name, useful for debugging and error handling.]]
    [[`rule<Iterator, A1, A2, A3> r(r2);`]      [Copy construct rule `r` from rule `r2`. `boost::shared_ptr` semantics.]]
    [[`r = r2;`]                                [Assign rule `r2` to `r`. `boost::shared_ptr` semantics.]]
    [[`r.alias()`]                              [return an alias of `r`. The alias is a generator that
                                                holds a reference to `r`. Reference semantics.]]
    [[`r.copy()`]                               [Get a copy of `r`. `boost::shared_ptr` semantics.]]
    [[`r.name(name)`]                           [Naming a rule]]
    [[`r.name()`]                               [Getting the name of a rule]]
    [[debug(r)]                                 [Debug rule `r`]]
    [[`r = g;`]                                 [Rule definition]]
    [[`r %= g;`]                                [Auto-rule definition. The attribute of `g` should be
                                                compatible with the synthesized attribute of `r`. When `g`
                                                is successful, its attribute is automatically propagated
                                                to `r`'s synthesized attribute.]]

    [[
``
    template <typename Iterator>
    struct my_grammar : grammar<Iterator, A1, A2, A3>
    {
        my_grammar() : my_grammar::base_type(start, name)
        {
            // Rule definitions
            start = /* ... */;
        }

        rule<Iterator, A1, A2, A3> start;
        // more rule declarations...
    };
``
    ]                                           [Grammar definition. `name` is an optional string that gives the
                                                grammar its name, useful for debugging and error handling.]]
    [[my_grammar<Iterator> g]                   [Instantiating a grammar]]
    [[`g.name(name)`]                           [Naming a grammar]]
    [[`g.name()`]                               [Getting the name of a grammar]]
]

[endsect]

[/////////////////////////////////////////////////////////////////////////////]
[section Semantic Actions]

Has the form:

    g[f]

where `f` is a function with the signatures:

    void f(Attr&);
    void f(Attr&, Context&);
    void f(Attr&, Context&, bool&);

You can use `__boost_bind__` to bind member functions. For function
objects, the allowed signatures are:

    void operator()(Attr&, unused_type, unused_type) const;
    void operator()(Attr&, Context&, unused_type) const;
    void operator()(Attr&, Context&, bool&) const;

The `unused_type` is used in the signatures above to signify 'don't
care'.

[endsect]

[/////////////////////////////////////////////////////////////////////////////]
[section Phoenix]

__boost_phoenix__ makes it easier to attach semantic actions. You just
inline your lambda expressions:

    g[phoenix-lambda-expression]

__karma__ provides some __boost_phoenix__ placeholders to access important
information from the `Attrib` and `Context` that are otherwise fiddly to extract.

[variablelist Spirit.Karma specific Phoenix placeholders
    [[`_1, _2... , _N`]         [Nth attribute of `g`]]
    [[`_val`]                   [The enclosing rule's synthesized attribute.]]
    [[`_r1, _r2... , _rN`]      [The enclosing rule's Nth inherited attribute.]]
    [[`_a, _b... , _j`]         [The enclosing rule's local variables (`_a` refers to the first).]]
    [[`_val`]                   [The enclosing rule's synthesized attribute.]]
    [[`_pass`]                  [Assign `false` to `_pass` to force a generator failure.]]
]

[endsect]


