[/==============================================================================
    Copyright (C) 2001-2009 Joel de Guzman
    Copyright (C) 2001-2009 Hartmut Kaiser

    Distributed under the Boost Software License, Version 1.0. (See accompanying
    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
===============================================================================/]

[section:string String]

This module includes different string oriented generators allowing to output
character sequences. It includes variants of the `string` generator.

[heading Description]

The string generators described in this section are:

[table
    [[Expression]           [Description]]
    [[`str`]                [Generates `str`]]
    [[`lit(str)`]           [Generates `str`, same as `boost::spirit::lit`]]
    [[`ns::string`]         [Generates the mandatory attribute as a string
                             interpreted in the character set defined by `ns`]]
    [[`ns::string(str)`]    [Generates `str` as a character interpreted in the 
                             character set defined by `ns`, if an attribute is 
                             supplied it must match]]
]

In the table above, `ns` is a __karma_char_encoding_namespace__ used by the 
corresponding string generator. 

[heading Header]

    // forwards to <boost/spirit/home/karma/string/lit.hpp>
    #include <boost/spirit/include/karma_string.hpp>

Also, see __include_structure__.

[heading Model of]

[:__primitive_generator_concept__]

[variablelist Notation
    [[`str`]      [Character-class specific string (See __char_class_types__),
                   or a __karma_lazy_argument__ that evaluates to a 
                   character-class specific string value]]
    [[`ns`]       [A __char_encoding_namespace__.]]]

[heading Expression Semantics]

Semantics of an expression is defined only where it differs from, or is
not defined in __primitive_generator_concept__.

[table
    [[Expression]           [Description]]
    [[`str`]                [Generate the string literal `str`. This generator 
                             never fails (except if the underlying output stream 
                             reports an error).]]
    [[`lit(str)`]           [Generate the string literal `str`. This generator 
                             never fails (except if the underlying output stream 
                             reports an error).]]
    [[`ns::string`]         [Generate the string provided by a mandatory 
                             attribute interpreted in the character set defined 
                             by `ns`. This generator never fails (except if the 
                             underlying output stream reports an error).]]
    [[`ns::string(str)`]    [Generate the string `str` as provided by the 
                             immediate literal value the generator is initialized 
                             from. If this generator has an associated attribute 
                             it succeeds only as long as the attribute is equal 
                             to the immediate literal (except if the underlying 
                             output stream reports an error). Otherwise this 
                             generator fails and does not generate any output.]]
]

[note   The generators `lit(str)` and `string(str)` can be initialized either 
        using a string literal value (i.e. `"abc"`), or using a 
        `std::basic_string<char_type, ...>`, where `char_type` is the required
        value type of the underlying character sequence.]

[heading Attributes]

[table
    [[Expression]           [Attribute]]
    [[`str`]                [__unused__]]
    [[`lit(str)`]           [__unused__]]
    [[`ns::string`]         [`Str`, attribute is mandatory (otherwise compilation 
                             will fail)]]
    [[`ns::string(str)`]    [`Str`, attribute is optional, if it is supplied, the 
                             generator compares the attribute with `str` and 
                             succeeds only if both are equal, failing otherwise]]
]

[heading Complexity]

[:O(N), where N is the number of characters emitted by the string generator]

[heading Example]

Some includes:

[reference_karma_includes]

All code snippets below use these common test functions:

[reference_karma_test]
[reference_karma_test_attr]

Some using declarations:

[reference_karma_using_declarations_string]

Basic usage of `string` generators:

[reference_karma_string]

[endsect]

