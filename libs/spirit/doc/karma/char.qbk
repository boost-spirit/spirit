[/==============================================================================
    Copyright (C) 2001-2009 Hartmut Kaiser
    Copyright (C) 2001-2009 Joel de Guzman

    Distributed under the Boost Software License, Version 1.0. (See accompanying
    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
===============================================================================/]

[section:char Char]

This module includes different character oriented generators allowing to output
single characters. It includes the character and character class generators.

[heading Module Header]

    // forwards to <boost/spirit/home/karma/char.hpp>
    #include <boost/spirit/include/karma_char.hpp>

[/////////////////////////////////////////////////////////////////////////////]
[section:char_generator Character Generators]

[heading Description]

The character generators described in this section are:

[table
    [[Expression]           [Description]]
    [[`ch`]                 [Generates `ch`]]
    [[`lit(ch)`]            [Generates `ch`, same as `boost::spirit::karma::lit`]]
    [[`ns::char_`]          [Generates the mandatory attribute as a single 
                             character interpreted in the character set define 
                             by `ns`]]
    [[`ns::char_(ch)`]      [Generates `ch` as a character interpreted in the 
                             character set defined by `ns`, if an attribute is 
                             supplied it must match]]
    [[`ns::char_("c")`]     [Generates `c` as a character interpreted in the 
                             character set defined by `ns`, if an attribute is 
                             supplied it must match, equivalent to `char_('c')`]]
    [[`ns::char_(ch1, ch2)`][Generates the character supplied as the attribute
                             if it belongs to the character range interpreted 
                             in the character set defined by `ns`]]
    [[`ns::char_(charset)`] [Generates the character supplied as the attribute
                             if it belongs to `charset` interpreted in the 
                             character set defined by `ns`]]
]

In the table above, `ns` is a __karma_char_encoding_namespace__ used by the 
corresponding character generator. 

[heading Header]

    // forwards to <boost/spirit/home/karma/char/char.hpp>
    #include <boost/spirit/include/karma_char_.hpp>

Also, see __include_structure__.

[heading Model of]

[:__primitive_generator_concept__]

[variablelist Notation
    [[`ch`, `ch1`, `ch2`]
                  [Character-class specific character (See __char_class_types__)]]
    [[`charset`]  [Character-class specific character set (See __char_class_types__)]]
    [[`ns`]       [A __char_encoding_namespace__.]]]

[heading Expression Semantics]

Semantics of an expression is defined only where it differs from, or is
not defined in __primitive_generator_concept__.

[table
    [[Expression]           [Description]]
    [[`ch`]                 [Generate the character literal `ch`. This generator 
                             never fails (except if the underlying output stream 
                             reports an error).]]
    [[`lit(ch)`]            [Generate the character literal `ch`. This generator 
                             never fails (except if the underlying output stream 
                             reports an error).]]
    [[`ns::char_`]          [Generate the character provided by a mandatory 
                             attribute interpreted in the character set defined 
                             by `ns`. This generator never fails (except if the 
                             underlying output stream reports an error).]]
    [[`ns::char_(ch)`]      [Generate the character `ch` as provided by the 
                             immediate literal value the generator is initialized 
                             from. If this generator has an associated attribute 
                             it succeeds only as long as the attribute is equal 
                             to the immediate literal (except if the underlying 
                             output stream reports an error). Otherwise this 
                             generator fails and does not generate any output.]]
    [[`ns::char_("c")`]     [Generate the character `c` as provided by the 
                             immediate literal value the generator is initialized 
                             from. If this generator has an associated attribute 
                             it succeeds only as long as the attribute is equal 
                             to the immediate literal (except if the underlying 
                             output stream reports an error). Otherwise this 
                             generator fails and does not generate any output.]]
    [[`ns::char_(ch1, ch2)`][Generate the character provided by a mandatory 
                             attribute interpreted in the character set defined 
                             by `ns`. The generator succeeds as long as the 
                             attribute belongs to the character range `[ch1, ch2]` 
                             (except if the underlying output stream reports an 
                             error). Otherwise this generator fails and does not 
                             generate any output.]]
    [[`ns::char_(charset)`] [Generate the character provided by a mandatory 
                             attribute interpreted in the character set defined 
                             by `ns`. The generator succeeds as long as the 
                             attribute belongs to the character set `charset` 
                             (except if the underlying output stream reports an 
                             error). Otherwise this generator fails and does not 
                             generate any output.]]
]

A character `ch` is assumed to belong to the character range defined by
`ns::char_(ch1, ch2)` if its character value (binary representation) 
interpreted in the character set defined by `ns` is not smaller than the 
character value of `ch1` and not larger then the character value of `ch2` (i.e. 
`ch1 <= ch <= ch2`).

The `charset` parameter passed to `ns::char_(charset)` must be a string
containing more than one character. Every single character in this string is 
assumed to belong to the character set defined by this expression. An exception 
to this is the `'-'` character which has a special meaning if it is not 
specified as the first and not the last character in `charset`. If the `'-'` 
is used in between to characters it is interpreted as spanning a character 
range. A character `ch` is considered to belong to the defined character set 
`charset` if it matches one of the characters as specified by the string 
parameter described above. For example

[table
    [[Example]              [Description]]
    [[`char_("abc")`]       ['a', 'b', and 'c']]
    [[`char_("a-z")`]       [all characters (and including) from 'a' to 'z']]
    [[`char_("a-zA-Z")`]    [all characters (and including) from 'a' to 'z' and 'A' and 'Z']]
    [[`char_("-1-9")`]      ['-' and all characters (and including) from '1' to '9']]
]

[heading Attributes]

[table
    [[Expression]           [Attribute]]
    [[`ch`]                 [__unused__]]
    [[`lit(ch)`]            [__unused__]]
    [[`ns::char_`]          [`Ch`, attribute is mandatory (otherwise compilation 
                             will fail)]]
    [[`ns::char_(ch)`]      [`Ch`, attribute is optional, if it is supplied, the 
                             generator compares the attribute with `ch` and 
                             succeeds only if both are equal, failing otherwise]]
    [[`ns::char_("c")`]     [`Ch`, attribute is optional, if it is supplied, the 
                             generator compares the attribute with `c` and 
                             succeeds only if both are equal, failing otherwise]]
    [[`ns::char_(ch1, ch2)`][`Ch`, attribute is mandatory (otherwise compilation 
                             will fail), the generator succeeds if the attribute 
                             belongs to the character range `[ch1, ch2]` 
                             interpreted in the character set defined by `ns`]]
    [[`ns::char_(charset)`] [`Ch`, attribute is mandatory (otherwise compilation 
                             will fail), the generator succeeds if the attribute 
                             belongs to the character set `charset`, interpreted 
                             in the character set defined by `ns`]]
]

[heading Complexity]

[:O(1)]

The complexity of `ch`, `lit(ch)`, `ns::char_`, `ns::char_(ch)`, and 
`ns::char_("c")` is constant as all generators emit exactly one character per 
invocation.

The character range generator (`ns::char_(ch1, ch2)`) additionally requires 
constant lookup time for the verification whether the attribute belongs to
the character range.

The character set generator (`ns::char_(charset)`) additionally requires 
O(log N) lookup time for the verification whether the attribute belongs to
the character set, where N is the number of characters in the character set.

[heading Example]

Some includes:

[reference_karma_includes]

All code snippets below use these common test functions:

[reference_karma_test]
[reference_karma_test_attr]

Some using declarations:

[reference_karma_using_declarations_char]

Basic usage of `char_` generators:

[reference_karma_char]

[endsect]

[/////////////////////////////////////////////////////////////////////////////]
[section:char_class Character Class Generators]

[heading Description]

The character class generators described in this section are:

[table
    [[Expression]          [Description]]
    [[`ns::alnum`]         [Generates the character supplied as the attribute
                            if it satisfies the concept of `std::isalnum` in 
                            the character set defined by `ns`]]
    [[`ns::alpha`]         [Generates the character supplied as the attribute
                            if it satisfies thh concept of `std::isalpha` in 
                            the character set defined by `ns`]]
    [[`ns::blank`]         [Generates the character supplied as the attribute
                            if it satisfies the concept of `std::isblank` in 
                            the character set defined by `ns`]]
    [[`ns::cntrl`]         [Generates the character supplied as the attribute
                            if it satisfies the concept of `std::iscntrl` in 
                            the character set defined by `ns`]]
    [[`ns::digit`]         [Generates the character supplied as the attribute
                            if it satisfies the concept of `std::isdigit` in 
                            the character set defined by `ns`]]
    [[`ns::graph`]         [Generates the character supplied as the attribute
                            if it satisfies the concept of `std::isgraph` in 
                            the character set defined by `ns`]]
    [[`ns::print`]         [Generates the character supplied as the attribute
                            if it satisfies the concept of `std::isprint` in 
                            the character set defined by `ns`]]
    [[`ns::punct`]         [Generates the character supplied as the attribute
                            if it satisfies the concept of `std::ispunct` in 
                            the character set defined by `ns`]]
    [[`ns::xdigit`]        [Generates the character supplied as the attribute
                            if it satisfies the concept of `std::isxdigit` in
                            the character set defined by `ns`]]
    [[`ns::lower`]         [Generates the character supplied as the attribute
                            if it satisfies the concept of `std::islower` in 
                            the character set defined by `ns`]]
    [[`ns::upper`]         [Generates the character supplied as the attribute
                            if it satisfies the concept of `std::isupper` in 
                            the character set defined by `ns`]]
    [[`ns::space`]         [Generates the character supplied as the attribute
                            if it satisfies the concept of `std::isspace` in 
                            or a single space character the character set 
                            defined by `ns`]]
]

In the table above, `ns` is a __karma_char_encoding_namespace__ used by the 
corresponding character class generator. All listed generators have a mandatory 
attribute `Ch` and will not compile if no attribute is associated.

[heading Header]

    // forwards to <boost/spirit/home/karma/char/char_class.hpp>
    #include <boost/spirit/include/karma_char_class.hpp>

Also, see __include_structure__.

[heading Model of]

[:__primitive_generator_concept__]

[variablelist Notation
    [[`ns`]       [A __char_encoding_namespace__.]]]

[heading Expression Semantics]

Semantics of an expression is defined only where it differs from, or is
not defined in __primitive_generator_concept__.

[table
    [[Expression]       [Semantics]]
    [[`ns::alnum`]      [If the mandatory attribute satisfies the concept of 
                         `std::isalnum` the generator succeeds after emitting 
                         its attribute (except if the underlying output stream 
                         reports an error). This generator fails otherwise 
                         while not generating anything.]]
    [[`ns::alpha`]      [If the mandatory attribute satisfies the concept of 
                         `std::isalpha` the generator succeeds after emitting 
                         its attribute (except if the underlying output stream 
                         reports an error). This generator fails otherwise 
                         while not generating anything.]]
    [[`ns::blank`]      [If the mandatory attribute satisfies the concept of 
                         `std::isblank` the generator succeeds after emitting 
                         its attribute (except if the underlying output stream 
                         reports an error). This generator fails otherwise 
                         while not generating anything.]]
    [[`ns::cntrl`]      [If the mandatory attribute satisfies the concept of 
                         `std::iscntrl` the generator succeeds after emitting 
                         its attribute (except if the underlying output stream 
                         reports an error). This generator fails otherwise 
                         while not generating anything.]]
    [[`ns::digit`]      [If the mandatory attribute satisfies the concept of 
                         `std::isdigit` the generator succeeds after emitting 
                         its attribute (except if the underlying output stream 
                         reports an error). This generator fails otherwise 
                         while not generating anything.]]
    [[`ns::graph`]      [If the mandatory attribute satisfies the concept of 
                         `std::isgraph` the generator succeeds after emitting 
                         its attribute (except if the underlying output stream 
                         reports an error). This generator fails otherwise 
                         while not generating anything.]]
    [[`ns::print`]      [If the mandatory attribute satisfies the concept of 
                         `std::isprint` the generator succeeds after emitting 
                         its attribute (except if the underlying output stream 
                         reports an error). This generator fails otherwise 
                         while not generating anything.]]
    [[`ns::punct`]      [If the mandatory attribute satisfies the concept of 
                         `std::ispunct` the generator succeeds after emitting 
                         its attribute (except if the underlying output stream 
                         reports an error). This generator fails otherwise 
                         while not generating anything.]]
    [[`ns::xdigit`]      [If the mandatory attribute satisfies the concept of 
                         `std::isxdigit` the generator succeeds after emitting 
                         its attribute (except if the underlying output stream 
                         reports an error). This generator fails otherwise 
                         while not generating anything.]]
    [[`ns::lower`]      [If the mandatory attribute satisfies the concept of 
                         `std::islower` the generator succeeds after emitting 
                         its attribute (except if the underlying output stream 
                         reports an error). This generator fails otherwise 
                         while not generating anything.]]
    [[`ns::upper`]      [If the mandatory attribute satisfies the concept of 
                         `std::isupper` the generator succeeds after emitting 
                         its attribute (except if the underlying output stream 
                         reports an error). This generator fails otherwise 
                         while not generating anything.]]
    [[`ns::space`]      [If the optional attribute satisfies the concept of 
                         `std::isspace` the generator succeeds after emitting 
                         its attribute (except if the underlying output stream 
                         reports an error). This generator fails otherwise 
                         while not generating anything.If no attribute is 
                         supplied this generator emits a single space 
                         character in the character set defined by `ns`.]]
]

Possible values for `ns` are described in the section __karma_char_encoding_namespace__.

[note   The generators `alpha` and `alnum` might seem to behave unexpected if 
        used inside a `lower[]` or `upper[]` directive. Both directives 
        additionally apply the semanitics of `std::islower` or `std::isupper`
        to the respective character class. Some examples:
``
    std::string s;
    std::back_insert_iterator<std::string> out(s);
    generate(out, lower[alpha], 'a');               // succeeds emitting 'a'
    generate(out, lower[alpha], 'A');               // fails 
``
        The generator directive `upper[]` behaves correspondingly.
]

[heading Attributes]

[:All listed character class generators can take any attribute `Ch`. All 
  character class generators (except `space`) require an attribute and will
  fail compiling otherwise.]

[heading Complexity]

[:O(1)]

The complexity is constant as the generators emit not more than one character 
per invocation.

[heading Example]

Some includes:

[reference_karma_includes]

All code snippets below use these common test functions:

[reference_karma_test_attr]

Some using declarations:

[reference_karma_using_declarations_char_class]

Basic usage of an `alpha` generator:

[reference_karma_char_class]

[endsect]

[endsect]
