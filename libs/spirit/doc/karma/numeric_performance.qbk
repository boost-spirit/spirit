[/==============================================================================
    Copyright (C) 2001-2009 Joel de Guzman
    Copyright (C) 2001-2009 Hartmut Kaiser

    Distributed under the Boost Software License, Version 1.0. (See accompanying
    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
===============================================================================/]

[section:numeric_performance Performance of Numeric Generators]

[section:double_performance Comparing the performance of a single double_ generator]

For the full source code of the performance test please see here:
[@../../example/karma/double_performance.cpp double_performance.cpp]). All the 
measurements have been done by doing 1000000 iterations for each formatting 
type (`NUMITERATIONS == 1000000`).

[import ../example/karma/double_performance.cpp]

Code used to measure the performance for printf:

[karma_double_performance_karma_printf]

Code used to measure the performance for standard iostreams:

[karma_double_performance_karma_iostreams]

Code used to measure the performance for Boost.Format:

[karma_double_performance_karma_format]

The following code shows the common definitions used by all Karma performance
measurements as listed below:

[karma_double_performance_karma_definitions]

Code used to measure the performance for Karma using a plain character buffer:

[karma_double_performance_karma_plain]

Code used to measure the performance for Karma using an output iterator on top
of a std::string as the destination buffer:

[karma_double_performance_karma_string]

Code used to measure the performance for Karma using a plain character buffer, 
but utilizing a karma::rule as the generator:

[karma_double_performance_karma_rule]

Code used to measure the performance using Karma's low level formatting routine
for floating point numbers.

[karma_double_performance_karma_direct]

[table Performance comparison for a single `double`
    [[Library]              [gcc 4.4.0 (MingW, 32Bit)] [VC++ 8 SP1 (32Bit)]  [VC++ 10 beta (32Bit)]  [gcc 4.1.2 (Linux, 64Bit)] [VC++ 10 beta (64Bit)]]
    [[printf]               [0.739 \[s\]]              [0.894 \[s\]]         [0.965 \[s\]]           [1.032 \[s\]]              [0.807 \[s\]]]
    [[iostreams]            [2.396 \[s\]]              [2.013 \[s\]]         [2.624 \[s\]]           [0.924 \[s\]]              [1.468 \[s\]]]
    [[Boost.Format]         [9.394 \[s\]]              [6.888 \[s\]]         [8.045 \[s\]]           [3.034 \[s\]]              [5.750 \[s\]]]
    [[Karma (char buffer)]  [0.832 \[s\]]              [0.483 \[s\]]         [0.561 \[s\]]           [0.394 \[s\]]              [0.260 \[s\]]]
    [[Karma (string)]       [0.873 \[s\]]              [1.193 \[s\]]         [0.701 \[s\]]           [0.478 \[s\]]              [0.384 \[s\]]]
    [[Karma (rule)]         [0.824 \[s\]]              [0.501 \[s\]]         [0.609 \[s\]]           [0.415 \[s\]]              [0.268 \[s\]]]
    [[Karma (direct)]       [0.608 \[s\]]              [0.419 \[s\]]         [0.475 \[s\]]           [0.254 \[s\]]              [0.207 \[s\]]]
]

[fig ./images/double_performance.png..Performance comparison for a single double..spirit.karma.double_performance]

[heading Platforms]

* Windows7, Intel Core Duo(tm) Processor, 2.8GHz, 4GByte RAM
* Linux, 8 Quad-Core AMD Opteron(tm) Processor, 2.8GHz, 64GByte RAM

[endsect]

[section:format_performance Comparing the performance of a sequence of several generators]

For the full source code of the performance test please see here:
[@../../example/karma/format_performance.cpp format_performance.cpp]). All the 
measurements have been done by doing 1000000 iterations for each formatting 
type (`NUMITERATIONS == 1000000`).

[import ../example/karma/format_performance.cpp]

Code used to measure the performance for printf:

[karma_format_performance_karma_printf]

Code used to measure the performance for standard iostreams:

[karma_format_performance_karma_iostreams]

Code used to measure the performance for Boost.Format:

[karma_format_performance_karma_format]

The following code shows the common definitions used by all Karma performance
measurements as listed below:

[karma_format_performance_karma_definitions]

Code used to measure the performance for Karma using a plain character buffer:

[karma_format_performance_karma_plain]

Code used to measure the performance for Karma using an output iterator on top
of a std::string as the destination buffer:

[karma_format_performance_karma_string]

Code used to measure the performance for Karma using a plain character buffer, 
but utilizing a karma::rule as the generator:

[karma_format_performance_karma_rule]

[table Performance comparison for a sequence of several items
    [[Library]              [gcc 4.4.0 (MingW, 32Bit)] [VC++ 8 SP1 (32Bit)]  [VC++ 10 beta (32Bit)]  [gcc 4.1.2 (Linux, 64Bit)] [VC++ 10 beta (64Bit)]]
    [[printf]               [1.597 \[s\]]              [2.058 \[s\]]         [1.989 \[s\]]           [1.742 \[s\]]              [1.693 \[s\]]]
    [[iostreams]            [4.727 \[s\]]              [4.166 \[s\]]         [5.294 \[s\]]           [2.223 \[s\]]              [3.272 \[s\]]]
    [[Boost.Format]         [9.541 \[s\]]              [11.308 \[s\]]        [11.862 \[s\]]          [5.146 \[s\]]              [9.110 \[s\]]]
    [[Karma (char buffer)]  [4.779 \[s\]]              [4.366 \[s\]]         [2.450 \[s\]]           [1.867 \[s\]]              [1.592 \[s\]]]
    [[Karma (string)]       [4.861 \[s\]]              [6.500 \[s\]]         [2.972 \[s\]]           [1.658 \[s\]]              [2.024 \[s\]]]
    [[Karma (rule)]         [4.723 \[s\]]              [4.344 \[s\]]         [2.579 \[s\]]           [1.893 \[s\]]              [1.574 \[s\]]]
]

[fig ./images/format_performance.png..Performance comparison for a sequence of several items..spirit.karma.format_performance]

[heading Platforms]

* Windows7, Intel Core Duo(tm) Processor, 2.8GHz, 4GByte RAM
* Linux, 8 Quad-Core AMD Opteron(tm) Processor, 2.8GHz, 64GByte RAM

[endsect]

[endsect]
