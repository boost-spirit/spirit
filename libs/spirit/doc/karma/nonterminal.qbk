[/==============================================================================
    Copyright (C) 2001-2009 Joel de Guzman
    Copyright (C) 2001-2009 Hartmut Kaiser

    Distributed under the Boost Software License, Version 1.0. (See accompanying
    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
===============================================================================/]

[section Nonterminal]

[heading Module Headers]

    // forwards to <boost/spirit/karma/nonterminal.hpp>
    #include <boost/spirit/include/karma_nonterminal.hpp>

Also, see __include_structure__.

[//////////////////////////////////////////////////////////////////////////////]
[section Rule]

[heading Description]

The rule is a polymorphic generator that acts as a named place-holder
capturing the behavior of an PEG expression assigned to it. Naming a
__peg__ expression allows it to be referenced later and makes it
possible for the rule to call itself. This is one of the most important
mechanisms and the reason behind the word "recursive" in recursive
descent output generation.

[heading Header]

    // forwards to <boost/spirit/karma/nonterminal/rule.hpp>
    #include <boost/spirit/include/karma_rule.hpp>

Also, see __include_structure__.

[heading Namespace]

[table
    [[Name]]
    [[`boost::spirit::karma::rule`]]
    [[`boost::spirit::qi::locals`]]
    [[`boost::spirit::qi::debug`]]

    [[`boost::spirit::_val  // alias: boost::spirit::karma::_val`]]
    [[`boost::spirit::_lp   // alias: boost::spirit::karma::_lp`]]
    [[`boost::spirit::_rN   // alias: boost::spirit::karma::_rN`]]
]

In the table above [*_lp] represents a local variable placeholder and
can be one of `_a`, `_b`, `_c`, `_d`, `_e`, `_f`, `_g`, `_h`, `_i` or
`_j` and [*_rN] represents an inherited attribute placeholder and can be
one of `_r1`, `_r2`, `_r3`, `_r4`, `_r5`, `_r6`, `_r7`, `_r8`, `_r9`
or`_r10`.

[heading Synopsis]

    template <typename OutputIterator, typename A1, typename A2, typename A3>
    struct rule;

[heading Template parameters]

[table
    [[Parameter]            [Description]                   [Default]]
    [[`OutputIterator`]     [The underlying output iterator 
                            type that the rule is  
                            expected to work on.]           [none]]
    [[`A1`, `A2`, `A3`]     [Either `Signature`, 
                            `Delimiter` or `Locals` in 
                            any order. See table below.]    [See table below.]]
]

Here is more information about the template parameters:

[table
    [[Parameter]            [Description]                   [Default]]
    [[`Signature`]          [Specifies the rule's consumed 
                            (value to output) and inherited 
                            (arguments) attributes. More on
                            this below.]                    [__unused_type__. 
                                                            When `Signature` defaults 
                                                            to __unused_type__, the effect 
                                                            is the same as specifying a signature
                                                            of `void()` which is also equivalent 
                                                            to `unused()`]]
    [[`Delimiter`]          [Specifies the rule's delimiter 
                            generator. Specify this if you
                            want the rule to skip white 
                            spaces.]                        [__unused_type__]]
    [[`Locals`]             [Specifies the rule's local
                            variables. See below.]          [__unused_type__]]
]

[heading Model of]

[:__generator_concept__]

[heading Signature]

Rules can have both consumed and inherited attributes. The rule's
/Signature/ specifies both the consumed and inherited attributes. The
specification uses the function declarator syntax: 

    RT(A0, A1, A2, ..., AN)

where `RT` is the rule's consumed attribute and `A0` ... `AN` are the
rule's inherited attributes.

[heading Attributes]

[:The rule's generator attribute is `RT`: The consumed attribute of the
rule.]

The rule models a C++ function. The rule's consumed attribute is
analogous to the function return value as it is the type -exposed- by the rule. 
Its inherited attributes are analogous to function arguments. The inherited 
attributes (arguments) can be passed in just like any __karma_lazy_argument__, 
e.g.:

    r(expr) // Evaluate expr at generation time and pass the result to the generator r

[heading `_val`]

The `_val` placeholder can be used in __phoenix__ semantic actions
anywhere in the rule's definition (RHS). This __phoenix__ placeholder
refers to the rule's (consumed) attribute. The `_val` placeholder
acts like a immutable reference to the rule's attribute.

[heading `_r1`...`r10`]

The `_r1`...`r10` placeholders can be used in __phoenix__ semantic
actions anywhere in the rule's definition (RHS). These __phoenix__
placeholders refer to the rule's inherited attributes.

[heading Locals]

Rules can have local variables that will be created on the stack at
generation time. A locals descriptor added to the rule declaration will give
the rule local variables: 

    template <typename T0, typename T1, typename T2, ... typename TN>
    struct locals;

where `T0` ... `TN` are the types of local variables accessible in your
__phoenix__ semantic actions using the placeholders `_a`, `_b`, `_c`,
`_d`, `_e`, `_f`, `_g`, `_h`, `_i` and `_j` which correspond to the
rule's local variables `T0` ... `T9`.

See example below.

[variablelist Notation
    [[`r, r2`]                  [Rules]]
    [[`g`]                      [A generator expression]]
    [[`arg1`, `arg2`, `argN`]   [__karma_lazy_arguments__ that evaluate to each of 
                                 the rule's inherited attributes (see below).]]
    [[`OutputIterator`]         [The underlying output iterator type that the rule is  
                                 expected to work on.]]
    [[`A1`, `A2`, `A3`]         [Either `Signature`, `Delimiter` or `Locals` in 
                                 any order.]]
]

[heading Expression Semantics]

Semantics of an expression is defined only where it differs from, or is
not defined in __generator_concept__.

[table
    [[Expression]                               [Description]]
    [[
``rule<OutputIterator, A1, A2, A3> 
    r(name);``] 
                                                [Rule declaration. `OutputIterator` is required.
                                                `A1, A2, A3` are optional and can be specified in any order.
                                                `name` is an optional string that gives the rule
                                                its name, useful for debugging.]]
    [[
``rule<OutputIterator, A1, A2, A3> 
    r(r2);``]                                   [Copy construct rule `r` from rule `r2`.]]
    [[`r`]                                      [In a generator expression, invoke rule `r`]]
    [[`r(arg1, arg2, ... argN)`]                [In a generator expression, invoke rule `r` 
                                                passing in inherited attributes
                                                `arg1`...`argN`]]
    [[`r = r2;`]                                [Assign rule `r2` to `r`.]]
    [[`r.alias()`]                              [return an alias of `r`. The alias is a generator that
                                                holds a reference to `r`. Reference semantics.]]
    [[`r.copy()`]                               [Get a copy of `r`.]]
    [[`r.name(name)`]                           [Naming a rule]]
    [[`r.name()`]                               [Getting the name of a rule]]
    [[`r = g;`]                                 [Rule definition]]
    [[`r %= expr;`]                             [Auto-rule definition. The attribute of `expr` should be
                                                compatible with the consumed attribute of `r`.]]
]

[heading Complexity]

[:The complexity is defined by the complexity of the RHS generator, `g`]

[heading Example]

[note The test harness for the example(s) below is presented in the
      __karma_basics_examples__ section.]

[karma_reference_rule]

[endsect] [/ Rule]

[endsect]
